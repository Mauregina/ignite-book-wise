// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Review        Review[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Book {
  id          String @id @default(cuid())
  title       String
  author      String
  description String
  pages       Int
  image_url   String

  BookCategory BookCategory[]
  Review       Review[]

  @@map("books")
}

model Category {
  id   String @id @default(cuid())
  name String

  BookCategory BookCategory[]

  @@map("categories")
}

model BookCategory {
  id          String   @id @default(cuid())
  book        Book     @relation(fields: [book_id], references: [id])
  book_id     String
  category    Category @relation(fields: [category_id], references: [id])
  category_id String

  @@map("bookCategories")
}

model Review {
  id          String   @id @default(cuid())
  score       String
  description String
  created_at  DateTime @default(now())

  book    Book   @relation(fields: [book_id], references: [id])
  book_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("reviews")
}
